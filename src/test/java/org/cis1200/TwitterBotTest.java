package org.cis1200;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.io.*;
import java.time.Duration;

import java.util.*;

/** Tests for TwitterBot class */
public class TwitterBotTest {
    String simple = "files/simple_test_data.csv";

    String complex = "files/first_test.csv";
    String empty = "files/empty.csv";

    /*
     * This tests whether your TwitterBot class itself is written correctly
     *
     * This test operates very similarly to our MarkovChain tests in its use of
     * `fixDistribution`, so make sure you know how to test MarkovChain before
     * testing this!
     */
    @Test
    public void simpleTwitterBotTest() {
        List<String> desiredTweet = new ArrayList<>(
                Arrays.asList(
                        "this", "comes", "from", "data", "with", "no", "duplicate", "words", ".",
                        "the", "end", "should", "come", "."
                )
        );
        String words = "0, The end should come here.\n"
                + "1, This comes from data with no duplicate words!";
        StringReader sr = new StringReader(words);
        BufferedReader br = new BufferedReader(sr);
        TwitterBot t = new TwitterBot(br, 1);
        t.fixDistribution(desiredTweet);

        String expected = "this comes from data with no duplicate words. the end should come.";
        String actual = TweetParser.replacePunctuation(t.generateTweet(12));
        assertEquals(expected, actual);
    }

    /*
     * This is the empty file test case.
     *
     * When your CSV file is empty, your program should create an empty MarkovChain.
     * An empty tweet should be generated by your bot.
     * No exceptions should be thrown and your program should not go into an
     * infinite loop!
     */
    @Test
    public void emptyFileCreatesEmptyTweet() {
        // Checks that your program does not go into an infinite loop
        assertTimeoutPreemptively(
                Duration.ofSeconds(10), () -> {
                    // No exceptions are thrown if file is empty
                    TwitterBot tb = new TwitterBot(
                            FileLineIterator.fileToReader("./files/empty.csv"), 2
                    );
                    // Checks that the bot creates an empty tweet
                    assertEquals(0, tb.generateTweet(10).length());
                }
        );
    }

    /* **** ****** **** WRITE YOUR TESTS BELOW THIS LINE **** ****** **** */

    @Test
    public void testPunctuation() {
        List<String> desiredTweet = new ArrayList<>(
                Arrays.asList(
                        "this", "comes", "from", "data", "with", "no", "duplicate", "words", ".",
                        "the", "end", "should", "come", "."
                )
        );
        String words = "0, The end should come here.\n"
                + "1, This comes from data with no duplicate words!";
        StringReader sr = new StringReader(words);
        BufferedReader br = new BufferedReader(sr);
        TwitterBot t = new TwitterBot(br, 1);
        t.fixDistribution(desiredTweet);

        String generatedTweet = TweetParser.replacePunctuation(t.generateTweet(12));
        boolean isPunctuated = t.isPunctuated(generatedTweet);
        assertTrue(isPunctuated);
    }

    @Test
    public void testGenerateCatTweets() throws IOException {
        // Given
        final String PATH_TO_CAT_TWEETS = "files/dog_feelings_tweets.csv";
        final String PATH_TO_OUTPUT_CAT_TWEETS = "files/dog_feelings_tweets.csv";
        final int CAT_TWEET_COLUMN = 3;
        TwitterBot bot = new TwitterBot(
                new BufferedReader(new FileReader(PATH_TO_CAT_TWEETS)), CAT_TWEET_COLUMN
        );

        TwitterBot tb = new TwitterBot(
                FileLineIterator.fileToReader("files/dog_feelings_tweets.csv"), 2
        );

        File outputFile = new File(PATH_TO_OUTPUT_CAT_TWEETS);
        assertTrue(outputFile.exists());
        assertTrue(outputFile.length() > 0);
    }

    @Test
    public void testShortTweets() throws IOException {
        // Given
        final String PATH_TO_SHORT_TWEETS = "files/just_one_tweets.csv";
        final String PATH_TO_OUTPUT_SHORT_TWEETS = "files/just_one_tweets.csv";
        final int SHORT_TWEET_COLUMN = 2;
        TwitterBot bot = new TwitterBot(
                new BufferedReader(new FileReader(PATH_TO_SHORT_TWEETS)), SHORT_TWEET_COLUMN
        );

        TwitterBot tb = new TwitterBot(
                FileLineIterator.fileToReader("files/just_one_tweets.csv"), 2
        );
        File outputFile = new File(PATH_TO_OUTPUT_SHORT_TWEETS);
        assertTrue(outputFile.exists());
        assertTrue(outputFile.length() > 0);
    }

    @Test
    public void testGenerateBigTweets() throws IOException {
        final String PATH_TO_LARGE_TWEETS = "files/noaa_tweets.csv";
        final String PATH_TO_OUTPUT_LARGE_TWEETS = "files/noaa_tweets.csv";
        final int LARGE_TWEET_COLUMN = 1;
        TwitterBot bot = new TwitterBot(
                new BufferedReader(new FileReader(PATH_TO_LARGE_TWEETS)), LARGE_TWEET_COLUMN
        );
        TwitterBot tb = new TwitterBot(
                FileLineIterator.fileToReader("files/noaa_tweets.csv"), 1
        );

        File outputFile = new File(PATH_TO_OUTPUT_LARGE_TWEETS);
        assertTrue(outputFile.exists());
        assertTrue(outputFile.length() > 0);
    }

    @Test
    public void emptyStringTest() {
        List<String> desiredTweet = new ArrayList<>(
                Arrays.asList(
                        "this", "comes", "from", "data", "with", "no", "duplicate", "words", ".",
                        "the", "end", "should", "come", "."
                )
        );
        String words = "0, The end should come here.\n"
                + "1, This comes from data with no duplicate words!";
        StringReader sr = new StringReader(words);
        BufferedReader br = new BufferedReader(sr);
        TwitterBot t = new TwitterBot(br, 1);
        t.fixDistribution(desiredTweet);
        t.generateTweet(0);

        String expected = "";
        String actual = TweetParser.replacePunctuation(t.generateTweet(0));
        assertEquals(expected, actual);
    }

    @Test()
    public void testAboveCharacterLimit280() {
        List<String> desiredTweet = new ArrayList<>(
                Arrays.asList(
                        "this", "comes", "from", "data", "with", "no", "duplicate", "words", ".",
                        "the", "end", "should", "come", ".",
                        "this", "comes", "from", "data", "with", "no", "duplicate", "words", ".",
                        "the", "end", "should", "come", ".",
                        "this", "comes", "from", "data", "with", "no", "duplicate", "words", ".",
                        "the", "end", "should", "come", ".",
                        "this", "comes", "from", "data", "with", "no", "duplicate", "words", ".",
                        "the", "end", "should", "come", ".",
                        "this", "comes", "from", "data", "with", "no", "duplicate", "words", ".",
                        "the", "end", "should", "come", "."
                )
        );
        String words = "0, The end should come here.\n"
                + "1, This comes from data with no duplicate words!";
        StringReader sr = new StringReader(words);
        BufferedReader br = new BufferedReader(sr);
        TwitterBot t = new TwitterBot(br, 1);
        t.generateTweet(78);

        String expected = "";
        String actual = TweetParser.replacePunctuation(t.generateTweet(0));
        assertEquals(expected, actual);
    }

}
